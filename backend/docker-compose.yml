# docker-compose.yml

services:
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ../frontend/src:/frontend/src
      - /frontend/node_modules
    environment:
      - NODE_ENV=development
<<<<<<< Updated upstream
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
    command: npm start
=======
>>>>>>> Stashed changes
    networks:
      - app-network

  backend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    environment:
<<<<<<< Updated upstream
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRATION=${JWT_EXPIRATION}
      - PORT=${PORT}
      - NODE_ENV=${NODE_ENV}
=======
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=mydatabase
      - DB_USER=postgres
      - DB_PASSWORD=2213Tb
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRATION=${JWT_EXPIRATION}
      - PORT=${PORT}
>>>>>>> Stashed changes
    depends_on:
      - db
    volumes:
      - .:/app
      - /app/node_modules
    command: npm run dev
    networks:
      - app-network

  db:
    image: postgres:13
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    ports:
      - "5432:5432"
    volumes:
      - ./db:/docker-entrypoint-initdb.d/
      - pgdata:/var/lib/postgresql/data
    networks:
      - app-network

volumes:
  pgdata:
    driver: local
  node_modules:
    driver: local

networks:
  app-network:
    driver: bridge
